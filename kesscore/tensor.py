# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_tensor.ipynb (unless otherwise specified).

__all__ = ['lshape', 'interleaved']

# Cell
from .imports import *
from .functional import *
from functools import wraps

# Cell
@patch(as_prop=True)
def lshape(self:Tensor): 'Like Tensor.shape but return a list'; return [*self.shape]

# Cell
@patch
def shape_is(self:Tensor,*size): return list(self.lshape)==list(size)

# Cell
@patch
def assert_shape(self:Tensor,*size):
    'Assert the tensor shape and produce a meaningfull assertion message in case it fails'
    assert self.shape_is(*size), f'Expected tensor of shape {(*size,)} but got tensor of shape {(*self.shape,)}'
    return self

# Cell
def interleaved(xs, dim):
    '''Given tuple of tensors `xs`, all with same shapes, return them concatenated on `dim`, but interleaved'''
    assert_isinstance(xs, (tuple, list, L))
    assert len(xs) != 0
    if len(xs) == 1: return xs
    xs = L(xs)
    xs.map(isinstance(Tensor)).assert_all()
    xs.map(Self.size()).assert_all_eq()
    shape = xs[0].lshape
    shape[dim] *= len(xs)
    xs = xs.map(Self.unsqueeze(dim+1))
    xs = torch.cat(tuple(xs), dim=dim+1)
    return xs.view(*shape)