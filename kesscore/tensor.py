# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_tensor.ipynb (unless otherwise specified).

__all__ = ['lshape', 'interleaved']

# Cell
from .imports import *
from .functional import *
from .tests import *
from functools import wraps

# Cell
@patch(as_prop=True)
def lshape(self:Tensor): 'Like Tensor.shape but return a list'; return [*self.shape]

# Cell
@patch
def shape_is(self:Tensor,*size): return list(self.lshape)==list(size)

# Cell
def interleaved(*args, dim):
    '''Given `args`, all with same shapes, return them concatenated on `dim`, but interleaved'''
    assert len(args) != 0
    if len(args) == 1: return args[0]
    test_all(*args, checker=isinstance(Tensor))
    test_all_eq(*args, map=Self.size())

    shape = args[0].lshape
    shape[dim] *= len(args)

    args = mapped(Self.unsqueeze(dim+1), args)
    x = torch.cat(tuple(args), dim=dim+1)
    return x.view(*shape)