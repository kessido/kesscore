# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_random.ipynb (unless otherwise specified).

__all__ = ['RandomState']

# Cell
from .imports import *

# Cell
def _rangechoice(nprs,len,size,replace,cum_weights,p):
    size,pyrs = ifnone(size,1),random.Random(nprs.random())
    if replace:
        assert p is None,'Should use cum_weights'
        if cum_weights is None: return nprs.randint(len,size=size)
        else:                 return pyrs.choices(range(len),k=size,cum_weights=cum_weights)
                                     # ^ here can also provide weight=p but performencewise not.
    else:
        assert cum_weights is None,'Should use p'
        if p is None: return pyrs.sample(range(len),size)
        else:         return nprs.choice(np.arange(len),size=size,replace=False,p=p)

def _choice(nprs,a,size=None,replace=True,cum_weights=None,p=None):
    if isinstance(a,(dict, range)): a=list(a)
    if isinstance(a,(tuple,list )): a=L(a)
    assert isinstance(a, (L,np.ndarray,torch.Tensor))
    idx = _rangechoice(nprs, len=len(a),size=size,replace=replace,cum_weights=cum_weights,p=p)
    if size == None: idx=idx[0] # instead or returning something like a[[1]] will rerturn a[1]
    return a[idx]

# Cell
@docs
class RandomState:
    def __init__(self, seed=None): self.rs=np.random.RandomState(seed=seed)
    def choice(self,a,size=None,cum_weights=None): return _choice(self.rs,a,size=size,replace=True, cum_weights=cum_weights)
    def sample(self,a,size=None,cum_weights=None): return _choice(self.rs,a,size=size,replace=False,cum_weights=cum_weights)
    def randn(self,size=None):return self.rs.randn(*size)
    def rand(self,size=None): return self.rs.random(size=size)
    def bool(self,size=None,p=0.5): return self.rand(size) < p
    def int(self,low,high=None,size=None,dtype=int): return self.rs.randint(low=low,high=high,size=size,dtype=dtype)
    _docs = dict(
        cls_doc = "The class docstring",
        choice  = 'Get sample with replacements',
        sample  = 'Get sample w.o  replacements',
        randn   = 'Return floats in [0, 1)',
        rand    = 'Return floats from normal distribution N(0,1)',
        bool    = 'Return True with probability p',
        int     = 'Return int(ndarray) with in [low, high) ([0, low))',
    )