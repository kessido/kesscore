# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_images.ipynb (unless otherwise specified).

__all__ = ['show_image', 'show_images', 'show_titled_image', 'show_titled_images']

# Cell
from .base import *
from functools import wraps

# Cell
def _convert(im):
    if isinstance(im, (str, Path)): im = load_image(im)
    if isinstance(im, Tensor):      im = to_image(im)
    return im
def _converts(im): return L(list(im)).map(_convert)

def _convert_title(o):
    if isinstance(o, (str,Path)): o = (o,o)
    return (_convert(o[0]), o[1]) if isinstance(o,tuple) else _convert(o)
def _convert_titles(o): return L(list(o)).map(_convert_title)

def _a2f(f, g):
    'apply `g` to first arguments of `f`'
    @wraps(f)
    def _inner(x, *args, **kwargs): return f(g(x),*args,**kwargs)
    return _inner

# Cell
show_image        = _a2f(show_image       , _convert)
show_images       = _a2f(show_images      , _converts)
show_titled_image = _a2f(show_titled_image, _convert_title)

# Cell
@delegates(show_images)
def show_titled_images(o, **kwargs):
    o = L(list(o)).map(_convert_titles)
    if isinstance(o[0], tuple):
        o,titles = o.zip()
        if 'titles' not in kwargs.keys(): kwargs['titles'] = titles
    return show_images(o, **kwargs)