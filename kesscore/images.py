# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_images.ipynb (unless otherwise specified).

__all__ = ['show_image', 'show_images', 'show_titled_image', 'show_titled_images']

# Cell
from .imports import *
from .functional import *
from functools import wraps

# Cell
@typedispatch
def _convert(im:(str,Path)):     return load_image(im)
@typedispatch
def _convert(im:(torch.Tensor)): return to_image(im)

def _converts(im): return L(list(im)).map(_convert)

def _a2f(f, g):
    'apply `g` to first arguments of `f`'
    @wraps(f)
    def _inner(x, *args, **kwargs): return f(g(x),*args,**kwargs)
    return _inner

# Cell
show_image  = _a2f(show_image,  _convert)
show_images = _a2f(show_images, _converts)

# Cell
@typedispatch
def _convert_titles(o): return _convert(o)
@typedispatch
def _convert_titles(o:tuple): assert len(o)==2; return (_convert(o[0]), o[1])
@typedispatch
def _convert_titles(o:(str,Path)): return (_convert(o), o)

# Cell
_show_titled_image = show_titled_image
@wraps(_show_titled_image)
def show_titled_image(o, *args, **kwargs):
    return _show_titled_image(o, *args, **kwargs)

@delegates(show_images)
def show_titled_images(o, **kwargs):
    o = L(list(o)).map(_convert_titles)
    if isinstance(o[0], tuple):
        o,titles = o.zip()
        if 'titles' not in kwargs.keys(): kwargs['titles'] = titles
    return show_images(o, **kwargs)